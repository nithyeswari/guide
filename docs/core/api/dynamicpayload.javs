// 1. Using Map<String, Object> for completely dynamic structure
@RestController
@RequestMapping("/api/v1/dynamic")
@Tag(name = "Dynamic Payload API")
public class DynamicController {

    @Operation(
        summary = "Process dynamic payload",
        description = "Accepts any JSON structure"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "Successfully processed",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(
                    implementation = Object.class,
                    description = "Any JSON structure"
                )
            )
        )
    })
    @PostMapping("/map-approach")
    public ResponseEntity<Map<String, Object>> processDynamicPayload(
        @RequestBody Map<String, Object> payload
    ) {
        // Process the dynamic payload
        return ResponseEntity.ok(payload);
    }

    // 2. Using JsonNode for more control over JSON structure
    @Operation(
        summary = "Process with JsonNode",
        description = "Accepts any JSON with validation capabilities"
    )
    @PostMapping("/json-node")
    public ResponseEntity<JsonNode> processWithJsonNode(
        @RequestBody JsonNode payload
    ) {
        // Validate specific fields if needed
        if (payload.has("requiredField")) {
            // Process required field
        }
        return ResponseEntity.ok(payload);
    }

    // 3. Using Object class (least restrictive)
    @Operation(
        summary = "Process any object",
        description = "Accepts absolutely any valid JSON"
    )
    @PostMapping("/any")
    public ResponseEntity<Object> processAnyPayload(
        @RequestBody Object payload
    ) {
        return ResponseEntity.ok(payload);
    }
}

// 4. Using a flexible DTO with additional properties
@Schema(description = "Flexible payload with some required fields")
public class FlexiblePayloadDTO {
    
    @Schema(description = "Required ID field", example = "123")
    @NotNull
    private String id;
    
    @Schema(description = "Required type field", example = "USER")
    @NotNull
    private String type;
    
    // Additional dynamic properties
    @Schema(description = "Any additional fields")
    private Map<String, Object> additionalProperties = new HashMap<>();
    
    @JsonAnySetter
    public void setAdditionalProperty(String name, Object value) {
        additionalProperties.put(name, value);
    }
    
    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return additionalProperties;
    }
}

// 5. Using ObjectMapper for custom deserialization
@RestController
@RequestMapping("/api/v1/custom")
public class CustomDeserializationController {

    private final ObjectMapper objectMapper;

    public CustomDeserializationController(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    @PostMapping("/custom")
    public ResponseEntity<JsonNode> processCustomPayload(
        @RequestBody String payload
    ) throws JsonProcessingException {
        // Custom deserialization logic
        JsonNode jsonNode = objectMapper.readTree(payload);
        
        // Validate structure if needed
        validateStructure(jsonNode);
        
        return ResponseEntity.ok(jsonNode);
    }

    private void validateStructure(JsonNode node) {
        // Add custom validation logic
    }
}

// 6. Using OpenAPI annotations for documentation
@Schema(
    description = "Dynamic Payload Schema",
    example = """
        {
          "id": "123",
          "type": "USER",
          "customField1": "value1",
          "customField2": 42,
          "nestedObject": {
            "field1": "value",
            "field2": ["array", "of", "values"]
          }
        }
        """
)
public class DynamicPayloadExample {
    // This class is used only for OpenAPI documentation
}

// 7. Service layer implementation
@Service
@Slf4j
public class DynamicPayloadService {

    public Map<String, Object> processPayload(Map<String, Object> payload) {
        // Validate required fields if any
        validateRequiredFields(payload);
        
        // Process dynamic fields
        processDynamicFields(payload);
        
        return payload;
    }

    private void validateRequiredFields(Map<String, Object> payload) {
        Set<String> requiredFields = Set.of("id", "type");
        Set<String> missingFields = requiredFields.stream()
            .filter(field -> !payload.containsKey(field))
            .collect(Collectors.toSet());

        if (!missingFields.isEmpty()) {
            throw new ValidationException("Missing required fields: " + missingFields);
        }
    }

    private void processDynamicFields(Map<String, Object> payload) {
        // Process each field based on its type
        payload.forEach((key, value) -> {
            if (value instanceof Map) {
                // Process nested object
                processNestedObject(key, (Map<String, Object>) value);
            } else if (value instanceof List) {
                // Process array
                processArray(key, (List<?>) value);
            }
        });
    }

    private void processNestedObject(String key, Map<String, Object> nestedObject) {
        // Add processing logic for nested objects
        log.debug("Processing nested object for key: {}", key);
    }

    private void processArray(String key, List<?> array) {
        // Add processing logic for arrays
        log.debug("Processing array for key: {}", key);
    }
}

// 8. Example usage with cURL:
/*
curl -X POST http://localhost:8080/api/v1/dynamic/map-approach \
-H "Content-Type: application/json" \
-d '{
  "id": "123",
  "type": "USER",
  "customField1": "value1",
  "customField2": 42,
  "nestedObject": {
    "field1": "value",
    "field2": ["array", "of", "values"]
  }
}'
*/